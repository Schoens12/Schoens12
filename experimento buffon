import random
import numpy as np
import matplotlib.pyplot as plt
from math import sin,pi

def buffon2(n):
  lx = []
  ly = []
  l = 0.6 #longitud de la aguja
  a = 1 #de ancho de líneas paralelas
  k = 0;#Registra el número de veces que la aguja se cruza con la línea paralela
  for i in range(n):
    y = random.uniform(0, a/2)# Obedece la distrinucion uniforme en [0, a/2] para
    theta = random.uniform(0, pi)#Obedece la distribución uniforme en [0, pi] para
    if y < (l/2)*sin(theta):
      k = k + 1
      lx.append(k)
      ly.append((2*l*n)/(a*k))
  Pi = (2*l*n)/(a*k)
  e = np.absolute((Pi - np.pi)/np.pi)
  print("pi =", Pi)
  print("error =", e)
  fig = plt.figure(1, figsize=(8, 8))
  plt.xlabel("Iteraciones")
  plt.ylabel("Estimación de $\pi$")
  plt.grid()
  plt.plot(lx, ly, color="blue", markersize=1)
  plt.show()
  print("visualizando las ultimas 100 iteraciones:")
  fig = plt.figure(1, figsize=(8, 8))
  plt.xlabel("Iteraciones")
  plt.ylabel("Estimación de $\pi$")
  plt.grid()
  plt.plot(lx[k-100:k], ly[k-100:k], color="blue", markersize=1)
  plt.show()
  
  buffon2(1000000)
  
